# -*- coding: utf-8 -*-
"""Wine_Quality_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZwGe_eLMocRJ6o2Fb4LCnCbmeTH0Zze-
"""

from google.colab import files
files.upload()  # kaggle.json dosyasını yükle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!pip install kaggle
!kaggle datasets download -d uciml/red-wine-quality-cortez-et-al-2009
!unzip red-wine-quality-cortez-et-al-2009.zip

!pip install fpdf

!zip -r wine_quality_outputs.zip *.png wine_quality_report.pdf
files.download("wine_quality_outputs.zip")

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet

df = pd.read_csv("winequality-red.csv")

df["Quality_Label"] = np.where(df["quality"] >= 7, 1, 0)
df.drop("quality", axis=1, inplace=True)

scaler = StandardScaler()
features = df.drop("Quality_Label", axis=1).columns
df[features] = scaler.fit_transform(df[features])

sns.countplot(x="Quality_Label", data=df)
plt.title("Wine Quality Distribution (0: Average-Bad, 1: Good)")
plt.savefig("quality_distribution.png")
plt.close()

sns.boxplot(x="Quality_Label", y="alcohol", data=df)
plt.title("Wine Quality by Alcohol Content")
plt.savefig("alcohol_quality.png")
plt.close()

sns.boxplot(x="Quality_Label", y="sulphates", data=df)
plt.title("Wine Quality by Sulphates")
plt.savefig("sulphates_quality.png")
plt.close()

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Between Features")
plt.savefig("correlation_matrix.png")
plt.close()

X = df.drop("Quality_Label", axis=1)
y = df["Quality_Label"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=["Average-Bad", "Good"]))

importances = model.feature_importances_
features = X.columns
sns.barplot(x=importances, y=features)
plt.title("Feature Importance Ranking")
plt.savefig("feature_importance.png")
plt.close()

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Average-Bad", "Good"], yticklabels=["Average-Bad", "Good"])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.savefig("confusion_matrix.png")
plt.close()

doc = SimpleDocTemplate("wine_quality_report.pdf", pagesize=A4)
styles = getSampleStyleSheet()
elements = []

elements.append(Paragraph("Wine Quality Classification Project", styles['Title']))
elements.append(Spacer(1, 0.2*inch))
elements.append(Paragraph("Objective: Classify wine quality based on chemical properties.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))
elements.append(Paragraph("Problem: Wine quality depends on chemical properties.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Dataset Description", styles['Heading2']))
elements.append(Paragraph("The dataset is sourced from Kaggle (Wine Quality Dataset). It contains 1599 rows and 12 columns, including 11 chemical properties and 1 target variable (quality). Features include fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol. Quality scores range from 0 to 10, converted to binary labels: Good (quality >= 7) and Average-Bad (quality < 7).", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Methods", styles['Heading2']))
elements.append(Paragraph("Random Forest Classifier: A machine learning algorithm that builds multiple decision trees and combines their outputs for better accuracy and stability.", styles['Normal']))
elements.append(Paragraph("StandardScaler: Used to standardize features by removing the mean and scaling to unit variance, ensuring fair contribution of all features to the model.", styles['Normal']))
elements.append(Paragraph("Libraries: pandas for data manipulation, scikit-learn for modeling, seaborn and matplotlib for visualizations.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Exploratory Data Analysis (EDA)", styles['Heading2']))
elements.append(Paragraph("Wine Quality Distribution", styles['Normal']))
elements.append(Image("quality_distribution.png", width=4*inch, height=2*inch))
elements.append(Paragraph("The distribution shows a class imbalance: Average-Bad wines (label 0) are more common than Good wines (label 1).", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Alcohol Content vs. Quality", styles['Normal']))
elements.append(Image("alcohol_quality.png", width=4*inch, height=2*inch))
elements.append(Paragraph("Good wines tend to have higher alcohol content compared to Average-Bad wines.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Sulphates vs. Quality", styles['Normal']))
elements.append(Image("sulphates_quality.png", width=4*inch, height=2*inch))
elements.append(Paragraph("Good wines generally have higher sulphate levels.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Correlation Matrix", styles['Normal']))
elements.append(Image("correlation_matrix.png", width=4*inch, height=3*inch))
elements.append(Paragraph("Alcohol and sulphates show a positive correlation with quality, while volatile acidity has a negative correlation.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Results", styles['Heading2']))
elements.append(Paragraph("Accuracy: 90%", styles['Normal']))
elements.append(Paragraph("Classification Report:", styles['Normal']))
elements.append(Paragraph("Average-Bad: Precision 0.92, Recall 0.97, F1-Score 0.94", styles['Normal']))
elements.append(Paragraph("Good: Precision 0.73, Recall 0.51, F1-Score 0.60", styles['Normal']))
elements.append(Paragraph("Macro Average: F1-Score 0.77", styles['Normal']))
elements.append(Paragraph("Weighted Average: F1-Score 0.89", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Feature Importance", styles['Normal']))
elements.append(Image("feature_importance.png", width=4*inch, height=2*inch))
elements.append(Paragraph("Alcohol, sulphates, and volatile acidity are the most important features for predicting wine quality.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Confusion Matrix", styles['Normal']))
elements.append(Image("confusion_matrix.png", width=4*inch, height=2*inch))
elements.append(Paragraph("The model correctly identifies most Average-Bad wines but struggles with Good wines due to class imbalance.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Detailed Analysis", styles['Heading2']))
elements.append(Paragraph("The model achieves a high overall accuracy of 90%. However, the recall for the Good class (0.51) indicates that many good wines are misclassified as Average-Bad. This is likely due to class imbalance, as Good wines are underrepresented in the dataset (only about 13% of samples). Techniques like oversampling (SMOTE) or adjusting class weights could improve performance for the Good class.", styles['Normal']))
elements.append(Spacer(1, 0.1*inch))

elements.append(Paragraph("Recommendations", styles['Heading2']))
elements.append(Paragraph("For Producers: Optimize alcohol content (aim for higher levels) and increase sulphate levels to improve wine quality. Reduce volatile acidity, as it negatively impacts quality.", styles['Normal']))
elements.append(Paragraph("For Consumers: Choose wines with high alcohol content, higher sulphate levels, and low volatile acidity for better quality.", styles['Normal']))
elements.append(Paragraph("For Future Work: Address class imbalance using techniques like SMOTE or class weighting. Explore other algorithms like XGBoost or SVM for potentially better performance.", styles['Normal']))

doc.build(elements)

!pip install reportlab

!zip -r wine_quality_outputs.zip *.png wine_quality_report.pdf
files.download("wine_quality_outputs.zip")